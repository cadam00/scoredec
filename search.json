[{"path":"https://cadam00.github.io/scoredec/articles/Introduction.html","id":"s-core-algorithm","dir":"Articles","previous_headings":"","what":"s-core algorithm","title":"Introduction to scoredec","text":"s-core algorithm (Eidsaa Almaas, 2013) variation traditional k-core algorithm. particular, used decomposing graph using connections vertices. However, s-core restricted binary adjacency matrix like k-core algorithm (connected/connected), connectivity weights utilized. clear R implementation algorithm done brainGraph R package (Watson, 2024). expression flow chart s-core algorithm shown Fig. 1. Note implementation scoredec package minor significant differences, allowing much time memory efficient.  Fig. 1: s-core algorithm flowchart","code":""},{"path":[]},{"path":"https://cadam00.github.io/scoredec/articles/Introduction.html","id":"example-undirected-graph","dir":"Articles","previous_headings":"Example applications","what":"Example undirected graph","title":"Introduction to scoredec","text":"Fig. 2: Example undirected graph connectivity lines sized weights. clear Fig. 2 connections stronger others, greater connectivity weights. Moreover, vertex might strong weak weights. Therefore, decomposing graph visually might get hard, especially larger networks.  Fig. 3: Example undirected graph vertices sized s-coreness shown Fig. 3 vertices 1 4 higher coreness compared vertices, vertex 2 smallest one. Note undirected graphs mode (\"\",\"\" \"\") matter: Therefore, efficiency reasons, choosing mode = \"\" mode = \"\" preferred, long sum adjacency matrix transpose transforming undirected needed.","code":"# Import libraries library(scoredec) library(igraph)  # Create a dummy undirected graph set.seed(42) n <- 4 W <- matrix(runif(n^2),n) W[lower.tri(W)] <- t(W)[lower.tri(W)] diag(W) <- 0  # Print adjacency matrix print(W) ##           [,1]      [,2]      [,3]      [,4] ## [1,] 0.0000000 0.6417455 0.6569923 0.9346722 ## [2,] 0.6417455 0.0000000 0.7050648 0.2554288 ## [3,] 0.6569923 0.7050648 0.0000000 0.4622928 ## [4,] 0.9346722 0.2554288 0.4622928 0.0000000 # Transform adjacency matrix to graph g <- graph_from_adjacency_matrix(W, mode = \"undirected\", weighted = TRUE)  # Set seed for reproducible plot set.seed(42) plot(g,      edge.width=E(g)$weight * 5 # make connection weight lines thicker      ) # Get s-core values s_core_result <- s_coreness(g) print(s_core_result) ## [1] 3 1 2 3 # Plot result from s_coreness # Set seed for reproducibility set.seed(42)  plot(g,      edge.width  = E(g)$weight * 5, # make connection weight lines thicker      vertex.size = s_core_result * 10      ) all.equal(s_core_result, s_coreness(g, mode = \"in\")) ## [1] TRUE all.equal(s_core_result, s_coreness(g, mode = \"out\")) ## [1] TRUE"},{"path":"https://cadam00.github.io/scoredec/articles/Introduction.html","id":"example-directed-graph","dir":"Articles","previous_headings":"Example applications","what":"Example directed graph","title":"Introduction to scoredec","text":"Fig. 4: Example directed graph connectivity lines per direction sized weights. show Fig. 4, finding coreness directions weights even harder. Therefore, use s-core algorithm even cruicial . correspondence use -degree -degree strength vertices used k-cores (Csárdi Nepusz 2006; Csárdi et al. 2024), algorithm extended way well.  Fig. 5: Total degree s-coreness.  Fig. 6: -degree s-coreness.  Fig. 7: -degree s-coreness.","code":"# Create a dummy directed graph set.seed(42) n <- 4 W <- matrix(runif(n^2),n) diag(W) <- 0  # Print adjacency matrix print(W) ##           [,1]      [,2]      [,3]      [,4] ## [1,] 0.0000000 0.6417455 0.6569923 0.9346722 ## [2,] 0.9370754 0.0000000 0.7050648 0.2554288 ## [3,] 0.2861395 0.7365883 0.0000000 0.4622928 ## [4,] 0.8304476 0.1346666 0.7191123 0.0000000 # Transform adjacency matrix to graph g <- graph_from_adjacency_matrix(W, mode = \"directed\", weighted = TRUE)  # Set seed for reproducible plot set.seed(42) plot(g,      edge.width=E(g)$weight * 5, # make connection weight lines thicker,      edge.curved = rep(0.4, ecount(g)) # make directions more visible      ) # Get total degree s-core values all_s_core <- s_coreness(g, mode = \"all\") print(all_s_core) ## [1] 3 3 2 1 # Set seed for reproducibility set.seed(42)  plot(g,      edge.width  = E(g)$weight * 5, # make connection weight lines thicker,      edge.curved = rep(0.4, ecount(g)), # make directions more visible      vertex.size = all_s_core * 10      ) # Get in-degree s-core values in_s_core <- s_coreness(g, mode = \"in\") print(in_s_core) ## [1] 2 1 4 3 # Set seed for reproducibility set.seed(42)  plot(g,      edge.width  = E(g)$weight * 5, # make connection weight lines thicker,      edge.curved = rep(0.4, ecount(g)), # make directions more visible      vertex.size = in_s_core * 10      ) # Get out-degree s-core values out_s_core <- s_coreness(g, mode = \"out\") print(out_s_core) ## [1] 3 4 1 2 # Plot result from s_coreness # Set seed for reproducibility set.seed(42)  plot(g,      edge.width  = E(g)$weight * 5, # make connection weight lines thicker,      edge.curved = rep(0.4, ecount(g)), # make directions more visible      vertex.size = out_s_core * 10      )"},{"path":"https://cadam00.github.io/scoredec/articles/Introduction.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction to scoredec","text":"Csárdi, Gábor, Tamás Nepusz. (2006) “igraph software package complex network research.” InterJournal Complex Systems: 1695. https://igraph.org. Csárdi, Gábor, Tamás Nepusz, Vincent Traag, Szabolcs Horvát, Fabio Zanini, Daniel Noom, Kirill Müller. 2024.  igraph: Network Analysis Visualization R. https://doi.org/10.5281/zenodo.7682609. Eidsaa, M. Almaas, E. (2013)  “s-core network decomposition: generalization k-core analysis weighted networks”, Phys. Rev. E., American Physical Society, 88, 062819. https://doi.org/10.1103/PhysRevE.88.062819. Watson, C.G. (2024). “brainGraph: Graph Theory Analysis Brain MRI Data”. R package version 3.1.0. https://doi.org/10.32614/CRAN.package.brainGraph.","code":""},{"path":"https://cadam00.github.io/scoredec/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christos Adam. Author, maintainer.","code":""},{"path":"https://cadam00.github.io/scoredec/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Adam C (2024). scoredec: S-Core Graph Decomposition. R package version 0.1.1, https://cadam00.github.io/scoredec/, https://github.com/cadam00/scoredec.","code":"@Manual{,   title = {scoredec: S-Core Graph Decomposition},   author = {Christos Adam},   year = {2024},   note = {R package version 0.1.1, https://cadam00.github.io/scoredec/},   url = {https://github.com/cadam00/scoredec}, }"},{"path":"https://cadam00.github.io/scoredec/index.html","id":"installation","dir":"","previous_headings":"","what":"S-Core Graph Decomposition","title":"S-Core Graph Decomposition","text":"can install (CRAN) version scoredec like : Alternatively, can install development version scoredec using:","code":"install.packages(\"scoredec\") if (!require(remotes)) install.packages(\"remotes\") remotes::install_github(\"cadam00/scoredec\")"},{"path":"https://cadam00.github.io/scoredec/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"S-Core Graph Decomposition","text":"cite official (CRAN) version, please use: Adam, C. (2024). corbouli: Corbae-Ouliaris Frequency Domain Filtering. R package version 0.1.0. Available https://doi.org/10.32614/CRAN.package.scoredec. Alternatively, cite latest development version, please use: Adam, C. (2024). scoredec: S-Core Graph Decomposition (v0.1.1). Zenodo. https://doi.org/10.5281/zenodo.13743047.","code":""},{"path":"https://cadam00.github.io/scoredec/index.html","id":"s-core-algorithm","dir":"","previous_headings":"","what":"s-core algorithm","title":"S-Core Graph Decomposition","text":"s-core algorithm (Eidsaa Almaas, 2013) variation traditional k-core algorithm. particular, used decomposing graph using connections vertices. However, s-core restricted binary adjacency matrix like k-core algorithm (connected/connected), connectivity weights utilized. clear R implementation algorithm done brainGraph R package (Watson, 2024). expression flow chart s-core algorithm shown Fig. 1. Note implementation scoredec package minor significant differences, allowing much time memory efficient.  Fig. 1: s-core algorithm flowchart","code":""},{"path":[]},{"path":"https://cadam00.github.io/scoredec/index.html","id":"example-undirected-graph","dir":"","previous_headings":"","what":"Example undirected graph","title":"S-Core Graph Decomposition","text":"Fig. 2: Example undirected graph connectivity lines sized weights. clear Fig. 2 connections stronger others, greater connectivity weights. Moreover, vertex might strong weak weights. Therefore, decomposing graph visually might get hard, especially larger networks.  Fig. 3: Example undirected graph vertices sized s-coreness shown Fig. 3 vertices 1 4 higher coreness compared vertices, vertex 2 smallest one. Note undirected graphs mode (\"\",\"\" \"\") matter: Therefore, efficiency reasons, choosing mode = \"\" mode = \"\" preferred, long sum adjacency matrix transpose transforming undirected needed.","code":"# Import libraries library(scoredec) library(igraph)  # Create a dummy undirected graph set.seed(42) n <- 4 W <- matrix(runif(n^2),n) W[lower.tri(W)] <- t(W)[lower.tri(W)] diag(W) <- 0  # Print adjacency matrix print(W) ##           [,1]      [,2]      [,3]      [,4] ## [1,] 0.0000000 0.6417455 0.6569923 0.9346722 ## [2,] 0.6417455 0.0000000 0.7050648 0.2554288 ## [3,] 0.6569923 0.7050648 0.0000000 0.4622928 ## [4,] 0.9346722 0.2554288 0.4622928 0.0000000 # Transform adjacency matrix to graph g <- graph_from_adjacency_matrix(W, mode = \"undirected\", weighted = TRUE)  # Set seed for reproducible plot set.seed(42) plot(g,      edge.width=E(g)$weight * 5 # make connection weight lines thicker      ) # Get s-core values s_core_result <- s_coreness(g) print(s_core_result) ## [1] 3 1 2 3 # Plot result from s_coreness # Set seed for reproducibility set.seed(42)  plot(g,      edge.width  = E(g)$weight * 5, # make connection weight lines thicker      vertex.size = s_core_result * 10      ) all.equal(s_core_result, s_coreness(g, mode = \"in\")) ## [1] TRUE all.equal(s_core_result, s_coreness(g, mode = \"out\")) ## [1] TRUE"},{"path":"https://cadam00.github.io/scoredec/index.html","id":"example-directed-graph","dir":"","previous_headings":"","what":"Example directed graph","title":"S-Core Graph Decomposition","text":"Fig. 4: Example directed graph connectivity lines per direction sized weights. show Fig. 4, finding coreness directions weights even harder. Therefore, use s-core algorithm even cruicial . correspondence use -degree -degree strength vertices used k-cores (Csárdi Nepusz 2006; Csárdi et al. 2024), algorithm extended way well.  Fig. 5: Total degree s-coreness.  Fig. 6: -degree s-coreness.  Fig. 7: -degree s-coreness.","code":"# Create a dummy directed graph set.seed(42) n <- 4 W <- matrix(runif(n^2),n) diag(W) <- 0  # Print adjacency matrix print(W) ##           [,1]      [,2]      [,3]      [,4] ## [1,] 0.0000000 0.6417455 0.6569923 0.9346722 ## [2,] 0.9370754 0.0000000 0.7050648 0.2554288 ## [3,] 0.2861395 0.7365883 0.0000000 0.4622928 ## [4,] 0.8304476 0.1346666 0.7191123 0.0000000 # Transform adjacency matrix to graph g <- graph_from_adjacency_matrix(W, mode = \"directed\", weighted = TRUE)  # Set seed for reproducible plot set.seed(42) plot(g,      edge.width=E(g)$weight * 5, # make connection weight lines thicker,      edge.curved = rep(0.4, ecount(g)) # make directions more visible      ) # Get total degree s-core values all_s_core <- s_coreness(g, mode = \"all\") print(all_s_core) ## [1] 3 3 2 1 # Set seed for reproducibility set.seed(42)  plot(g,      edge.width  = E(g)$weight * 5, # make connection weight lines thicker,      edge.curved = rep(0.4, ecount(g)), # make directions more visible      vertex.size = all_s_core * 10      ) # Get in-degree s-core values in_s_core <- s_coreness(g, mode = \"in\") print(in_s_core) ## [1] 2 1 4 3 # Set seed for reproducibility set.seed(42)  plot(g,      edge.width  = E(g)$weight * 5, # make connection weight lines thicker,      edge.curved = rep(0.4, ecount(g)), # make directions more visible      vertex.size = in_s_core * 10      ) # Get out-degree s-core values out_s_core <- s_coreness(g, mode = \"out\") print(out_s_core) ## [1] 3 4 1 2 # Plot result from s_coreness # Set seed for reproducibility set.seed(42)  plot(g,      edge.width  = E(g)$weight * 5, # make connection weight lines thicker,      edge.curved = rep(0.4, ecount(g)), # make directions more visible      vertex.size = out_s_core * 10      )"},{"path":"https://cadam00.github.io/scoredec/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"S-Core Graph Decomposition","text":"Csárdi, Gábor, Tamás Nepusz. (2006) “igraph software package complex network research.” InterJournal Complex Systems: 1695. https://igraph.org. Csárdi, Gábor, Tamás Nepusz, Vincent Traag, Szabolcs Horvát, Fabio Zanini, Daniel Noom, Kirill Müller. 2024.  igraph: Network Analysis Visualization R. https://doi.org/10.5281/zenodo.7682609. Eidsaa, M. Almaas, E. (2013)  “s-core network decomposition: generalization k-core analysis weighted networks”, Phys. Rev. E., American Physical Society, 88, 062819. https://doi.org/10.1103/PhysRevE.88.062819. Watson, C.G. (2024). “brainGraph: Graph Theory Analysis Brain MRI Data”. R package version 3.1.0. https://doi.org/10.32614/CRAN.package.brainGraph.","code":""},{"path":"https://cadam00.github.io/scoredec/reference/s_coreness.html","id":null,"dir":"Reference","previous_headings":"","what":"s-core community decomposition — s_coreness","title":"s-core community decomposition — s_coreness","text":"s-core community decomposition","code":""},{"path":"https://cadam00.github.io/scoredec/reference/s_coreness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"s-core community decomposition — s_coreness","text":"","code":"s_coreness(g = NULL, W = NULL, mode = \"all\")"},{"path":"https://cadam00.github.io/scoredec/reference/s_coreness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"s-core community decomposition — s_coreness","text":"g igraph object. weighted graph. weighted, igraph::coreness function used. can used alternative W. W matrix object. adjacency matrix. can used alternative g. mode character object. can one \"\", \"\" \"\".","code":""},{"path":"https://cadam00.github.io/scoredec/reference/s_coreness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"s-core community decomposition — s_coreness","text":"s-core community decomposition implementation. one g W must provided. source code clear one brainGraph::s_core, speed memory efficient. case adjacency matrix W provided instead graph g provided, function speed memory efficient. Note cases adjacency matrix W known symmetric (checked, example, base::isSymmetric Rfast::.symmetric), mode = \"\" mode = \"\" produce result efficiently. efficiency reasons checking chosen, user .","code":""},{"path":"https://cadam00.github.io/scoredec/reference/s_coreness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"s-core community decomposition — s_coreness","text":"Integer vector s-coreness attribute vertex.","code":""},{"path":"https://cadam00.github.io/scoredec/reference/s_coreness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"s-core community decomposition — s_coreness","text":"Eidsaa, M. Almaas, E. (2013) ‘s-core network decomposition: generalization k-core analysis weighted networks’, Phys. Rev. E., American Physical Society, 88, 062819. doi:10.1103/PhysRevE.88.062819 . Watson, C.G. (2024). brainGraph: Graph Theory Analysis Brain MRI Data. R package version 3.1.0. doi:10.32614/CRAN.package.brainGraph .","code":""},{"path":"https://cadam00.github.io/scoredec/reference/s_coreness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"s-core community decomposition — s_coreness","text":"","code":"set.seed(42)  # Create a dummy symmetric adjacency matrix n <- 5 W <- matrix(runif(n^2),n) W[lower.tri(W)] = t(W)[lower.tri(W)] diag(W) <- 0  print(scoredec::s_coreness(g = NULL, W = W, mode = \"all\")) #> [1] 3 2 1 4 4 ## [1] 3 1 2 4 4  base::isSymmetric(W) #> [1] TRUE ## [1] TRUE  all.equal(scoredec::s_coreness(g = NULL, W = W, mode = \"all\"), scoredec::s_coreness(g = NULL, W = W, mode = \"in\")) #> [1] TRUE ## [1] TRUE  # Create a dummy undirected graph g <- igraph::graph_from_adjacency_matrix(adjmatrix = W,                                          mode      = \"undirected\",                                          weighted  = TRUE) print(scoredec::s_coreness(g = g, W = NULL, mode = \"all\")) #> [1] 3 2 1 4 4 ## [1] 3 1 2 4 4"},{"path":"https://cadam00.github.io/scoredec/news/index.html","id":"scoredec-010","dir":"Changelog","previous_headings":"","what":"scoredec 0.1.0","title":"scoredec 0.1.0","text":"CRAN release: 2024-09-19","code":""},{"path":"https://cadam00.github.io/scoredec/news/index.html","id":"minor-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"scoredec 0.1.0","text":"Update README.md file.","code":""},{"path":"https://cadam00.github.io/scoredec/news/index.html","id":"scoredec-010-1","dir":"Changelog","previous_headings":"","what":"scoredec 0.1.0","title":"scoredec 0.1.0","text":"CRAN release: 2024-09-19","code":""},{"path":"https://cadam00.github.io/scoredec/news/index.html","id":"major-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"scoredec 0.1.0","text":"Initial package version.","code":""}]
